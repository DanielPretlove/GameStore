@page "/GameStore/create"

@using GameStore.Web.Shared.Models.SummaryModels;
@using System.Text.Json;
@using System.Text;


@inject NavigationManager UriHelper
@inject HttpClient http

<MudCard>
	<MudCardContent>
		<MudForm @ref="form">
			<MudText Typo="Typo.h3">Create New Store Data</MudText>
			<MudTextField @bind-Value="@DescriptionValue" T="string" Label="Description" Required="true" RequiredError="Description is required!" />
			<MudTextField @bind-Value="@NameValue" T="string" Label="Name" Required="true" RequiredError="Name is required!" />
			<MudTextField @bind-Value="@AddressValue" T="string" Label="Address" Required="true" RequiredError="Address is required!" />
		</MudForm>
	</MudCardContent>
	<MudCardActions>
		<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.ArrowBack" OnClick="@(() => ReturnToViewStoreDetails())">Go Back</MudButton>
		<MudButton Disabled="@createState" Variant="Variant.Filled" StartIcon="@Icons.Filled.Save" Color="Color.Info" OnClick="@(() => CreateStore())">
			@if (createState == true)
			{
				<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
				<MudText Class="ms-2">Processing</MudText>
			}
			else
			{
				<MudText>Save</MudText>
			}
		</MudButton>
	</MudCardActions>
</MudCard>
<br />

@code {
	public bool createState = false;
	public MudForm form;
	public string DescriptionValue = string.Empty;
	public string NameValue = string.Empty;
	public string AddressValue = string.Empty;
	public GameStoreSummaryModel storeSummary;
	private string? errorMessage;

	public void ReturnToViewStoreDetails()
	{
		UriHelper.NavigateTo("/store");
	}


	public async Task CreateStore()
	{
		var postBody = new { Description = DescriptionValue, Name = NameValue, Address = AddressValue };


		using var response = await http.PostAsJsonAsync("api/GameStore", postBody);

		if(!response.IsSuccessStatusCode)
		{
			errorMessage = response.ReasonPhrase;
			Console.WriteLine($"There was an error! {errorMessage}");
			return;
		}

		storeSummary = await response.Content.ReadFromJsonAsync<GameStoreSummaryModel>();
		createState = true;
		await Task.Run(async () =>
		{
			await Task.Delay(3000);
			ReturnToViewStoreDetails();
		});
	}
}
